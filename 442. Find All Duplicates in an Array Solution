# from collections import Counter
# class Solution:
#     def findDuplicates(self, nums: List[int]) -> List[int]:
#         counts = Counter(nums)
#         return [value for value, count in counts.items() if count > 1]

# 0 1 2 3 4 5 6 7 
# 4,3,2,7,8,2,3,1
# 7,3,2,4,8,2,3,1
# 3,3,2,4,8,2,7,1
# 1,2,3,4,3,2,7,8

# output = [3, ]

        
class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        i = 0
        while (i < len(nums)):
            if nums[i] != i + 1:
                if nums[nums[i] - 1] == nums[i]:
                    i += 1
                else:
                    aux = nums[nums[i] - 1]
                    nums[nums[i] - 1] = nums[i]
                    nums[i] = aux
            else:
                i +=1
                
        return [value for idx, value in enumerate(nums) if idx + 1 != value]                
        
